///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <string>
#include <chrono>

///////////////////////////////////////////////////////////////////////////////
// Namespace Zappy
///////////////////////////////////////////////////////////////////////////////
namespace Zappy
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Message
{
private:
    ///////////////////////////////////////////////////////////////////////////
    // Type alias for time point
    ///////////////////////////////////////////////////////////////////////////
    using TimePoint = std::chrono::steady_clock::time_point;

private:
    ///////////////////////////////////////////////////////////////////////////
    // Private members
    ///////////////////////////////////////////////////////////////////////////
    std::string m_content;      //<! The content of the message
    std::string m_type;         //<! The type of the message
    std::string m_source;       //<! The source of the message
    bool m_isImportant;         //<! Indicate if the message is important
    TimePoint m_timestamp;      //<! The timestamp of the message

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param content The content of the message
    /// \param type The type of the message
    /// \param source The source of the message
    /// \param isImportant Indicate if the message is important
    ///
    ///////////////////////////////////////////////////////////////////////////
    Message(
        const std::string& content,
        const std::string& type,
        const std::string& source,
        bool isImportant = false
    );
};

} // !namespace Zappy
