///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Game/Player.hpp"
#include <sstream>

///////////////////////////////////////////////////////////////////////////////
// Namespace Zappy
///////////////////////////////////////////////////////////////////////////////
namespace Zappy
{

///////////////////////////////////////////////////////////////////////////////
Player::Player(const std::string& pnw)
    : m_id(0)
    , m_x(0)
    , m_y(0)
    , m_level(1)
    , m_isAlive(true)
{
    std::istringstream iss(pnw);
    std::string name;

    iss >> name >> m_x >> m_y >> m_orientation >> m_level >> m_team;

    if (!name.empty())
    {
        m_id = std::stoi(name.substr(1));
        m_name = "Player " + std::to_string(m_id);
    }

    m_inventory.food = 10;
}

///////////////////////////////////////////////////////////////////////////////
unsigned int Player::GetID(void) const
{
    return (m_id);
}

///////////////////////////////////////////////////////////////////////////////
const std::string& Player::GetName(void) const
{
    return (m_name);
}

///////////////////////////////////////////////////////////////////////////////
unsigned int Player::GetX(void) const
{
    return (m_x);
}

///////////////////////////////////////////////////////////////////////////////
unsigned int Player::GetY(void) const
{
    return (m_y);
}

///////////////////////////////////////////////////////////////////////////////
unsigned int Player::GetOrientation(void) const
{
    return (m_orientation);
}

///////////////////////////////////////////////////////////////////////////////
std::tuple<unsigned int, unsigned int> Player::GetPosition(void) const
{
    return (std::make_tuple(m_x, m_y));
}

///////////////////////////////////////////////////////////////////////////////
unsigned int Player::GetLevel(void) const
{
    return (m_level);
}

///////////////////////////////////////////////////////////////////////////////
bool Player::IsAlive(void) const
{
    return (m_isAlive);
}

///////////////////////////////////////////////////////////////////////////////
const std::string& Player::GetTeam(void) const
{
    return (m_team);
}

///////////////////////////////////////////////////////////////////////////////
const Inventory& Player::GetInventory(void) const
{
    return (m_inventory);
}

///////////////////////////////////////////////////////////////////////////////
bool Player::IsAlive(void) const
{
    return (m_isAlive);
}

///////////////////////////////////////////////////////////////////////////////
void Player::UpdateInventory(const std::string& pin)
{
    m_inventory.ParseContent(pin);
}

///////////////////////////////////////////////////////////////////////////////
void Player::UpdatePosition(const std::string& ppo)
{
    std::istringstream iss(ppo);

    iss >> m_x >> m_y >> m_orientation;
}

///////////////////////////////////////////////////////////////////////////////
void Player::UpdateLevel(const std::string& plv)
{
    std::istringstream iss(plv);

    iss >> m_level;
}

///////////////////////////////////////////////////////////////////////////////
void Player::SetAlive(bool alive)
{
    m_isAlive = alive;
}

} // !namespace Zappy
