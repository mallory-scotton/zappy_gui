///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Game/Inventory.hpp"
#include <string>
#include <tuple>

///////////////////////////////////////////////////////////////////////////////
// Namespace Zappy
///////////////////////////////////////////////////////////////////////////////
namespace Zappy
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Player
{
private:
    ///////////////////////////////////////////////////////////////////////////
    // Public members
    ///////////////////////////////////////////////////////////////////////////
    unsigned int m_id;          //<! Player ID
    std::string m_name;         //<! Player name
    unsigned int m_x;           //<! Player X coordinate
    unsigned int m_y;           //<! Player Y coordinate
    unsigned int m_level;       //<! Player level
    unsigned int m_orientation; //<! Player orientation
    Inventory m_inventory;      //<! Player inventory
    bool m_isAlive;             //<! Player alive status
    std::string m_team;         //<! Player team name

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor
    ///
    /// \param pnw The player network message string
    ///
    ///////////////////////////////////////////////////////////////////////////
    Player(const std::string& pnw);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets the player ID
    ///
    /// \return The player ID
    ///
    ///////////////////////////////////////////////////////////////////////////
    unsigned int GetID(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets the player name
    ///
    /// \return The player name
    ///
    ///////////////////////////////////////////////////////////////////////////
    const std::string& GetName(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets the player X coordinate
    ///
    /// \return The player X coordinate
    ///
    ///////////////////////////////////////////////////////////////////////////
    unsigned int GetX(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets the player Y coordinate
    ///
    /// \return The player Y coordinate
    ///
    ///////////////////////////////////////////////////////////////////////////
    unsigned int GetY(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets the player orientation
    ///
    /// \return The player orientation
    ///
    ///////////////////////////////////////////////////////////////////////////
    unsigned int GetOrientation(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets the player position as a tuple of (X, Y)
    ///
    /// \return A tuple containing the player X and Y coordinates
    ///
    ///////////////////////////////////////////////////////////////////////////
    std::tuple<unsigned int, unsigned int> GetPosition(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets the player level
    ///
    /// \return The player level
    ///
    ///////////////////////////////////////////////////////////////////////////
    unsigned int GetLevel(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Checks if the player is alive
    ///
    /// \return True if the player is alive, false otherwise
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool IsAlive(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets the player's team name
    ///
    /// \return The player's team name
    ///
    ///////////////////////////////////////////////////////////////////////////
    const std::string& GetTeam(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets the player's inventory
    ///
    /// \return A reference to the player's inventory
    ///
    ///////////////////////////////////////////////////////////////////////////
    const Inventory& GetInventory(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Updates the player's inventory based on the provided PIN message
    ///
    /// \param pin The PIN message string containing inventory data
    ///
    ///////////////////////////////////////////////////////////////////////////
    void UpdateInventory(const std::string& pin);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Updates the player's position based on the provided PPO message
    ///
    /// \param ppo The player position update string
    ///
    ///////////////////////////////////////////////////////////////////////////
    void UpdatePosition(const std::string& ppo);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Updates the player's level based on the provided PLV message
    ///
    /// \param plv The player level update string
    ///
    ///////////////////////////////////////////////////////////////////////////
    void UpdateLevel(const std::string& plv);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Sets the player's alive status
    ///
    /// \param alive The new alive status of the player
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetAlive(bool alive);
};

} // !namespace Zappy
