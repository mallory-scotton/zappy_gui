///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include <SFML/System.hpp>

///////////////////////////////////////////////////////////////////////////////
// Namespace Zappy
///////////////////////////////////////////////////////////////////////////////
namespace Zappy
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Viewport
{
private:
    ///////////////////////////////////////////////////////////////////////////
    // Constants
    ///////////////////////////////////////////////////////////////////////////
    static constexpr unsigned int DEFAULT_WIDTH = 800;
    static constexpr unsigned int DEFAULT_HEIGHT = 600;
    static constexpr float DEFAULT_ZOOM = 1.0f;
    static constexpr float MIN_ZOOM = 0.1f;
    static constexpr float MAX_ZOOM = 1.2f;
    static constexpr float TILE_SIZE = 64.0f;

private:
    ///////////////////////////////////////////////////////////////////////////
    // Private members
    ///////////////////////////////////////////////////////////////////////////
    sf::View m_view;                //< The SFML view for the viewport
    sf::RenderTexture m_texture;    //< The texture used for rendering
    float m_zoom;                   //< The zoom level of the viewport
    bool m_isDragging;              //< Indicate if the viewport is being dragged
    sf::Vector2f m_lastMousePos;    //< The last mouse position when dragging
    float m_viewportX;              //< The X position of the viewport
    float m_viewportY;              //< The Y position of the viewport
    bool m_forceRender;             //< Flag to force rendering

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor for the Viewport class
    ///
    ///////////////////////////////////////////////////////////////////////////
    Viewport(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the texture id of the viewport
    ///
    /// \return The texture ID of the viewport
    ///
    ///////////////////////////////////////////////////////////////////////////
    unsigned int GetTextureID(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Render the viewport
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Render(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Resize the viewport
    ///
    /// \param width The width of the viewport
    /// \param height The height of the viewport
    ///
    /// \return True if the viewport was resized successfully, false otherwise
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool Resize(unsigned int width, unsigned int height);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the size of the viewport
    ///
    /// \return The size of the viewport as a sf::Vector2u
    ///
    ///////////////////////////////////////////////////////////////////////////
    sf::Vector2u GetSize(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Handle an SFML event
    ///
    /// \param event The SFML event to handle
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ProcessEvent(const sf::Event& event);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Set the viewport position
    ///
    /// \param x The X position of the viewport
    /// \param y The Y position of the viewport
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetViewportPosition(float x, float y);

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Zoom the viewport
    ///
    /// \param factor The zoom factor to apply
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Zoom(float factor);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Render the grid on the viewport
    ///
    ///////////////////////////////////////////////////////////////////////////
    void RenderGrid(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Render the players on the viewport
    ///
    ///////////////////////////////////////////////////////////////////////////
    void RenderPlayers(void);
};

} // !namespace Zappy
