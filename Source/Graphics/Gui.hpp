///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>

///////////////////////////////////////////////////////////////////////////////
// Namespace Zappy
///////////////////////////////////////////////////////////////////////////////
namespace Zappy
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Gui
{
private:
    ///////////////////////////////////////////////////////////////////////////
    // Private members
    ///////////////////////////////////////////////////////////////////////////
    sf::RenderWindow& m_window; //<! The window to which the GUI is attached
    sf::Clock m_clock;          //<! Clock to manage frame time
    int m_currentX;
    int m_currentY;

    bool m_EggLogs = true;
    bool m_BroadcastLogs = true;
    bool m_EventLogs = true;
    bool m_IncantationLogs = true;
    bool m_ResourceLogs = true;
    bool m_DeathLogs = true;
    bool m_VictoryLogs = true;
    bool m_InfoLogs = true;
    bool m_ErrorLogs = true;


public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor of the gui
    ///
    /// \param window The SFML render window to attach the GUI to
    ///
    ///////////////////////////////////////////////////////////////////////////
    Gui(sf::RenderWindow& window);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor of the gui
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Gui();

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param event The SFML event to process
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ProcessEvent(const sf::Event& event);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Updates the GUI
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Update(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Renders the GUI
    ///
    /// \param viewport The viewport texture to display
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Render(unsigned int viewport);

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Sets up the ImGui style
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetupImGuiStyle(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Prepares docking for the GUI
    ///
    ///////////////////////////////////////////////////////////////////////////
    void PrepareDocking(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Renders the viewport
    ///
    /// \param viewport The viewport to render
    ///
    ///////////////////////////////////////////////////////////////////////////
    void RenderViewport(unsigned int viewport);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Renders the logs
    ///
    ///////////////////////////////////////////////////////////////////////////
    void RenderLogs(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Renders the current game view
    ///
    ///////////////////////////////////////////////////////////////////////////
    void RenderCurrentGame(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Renders the tile inspector
    ///
    ///////////////////////////////////////////////////////////////////////////
    void RenderTileInspector(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Convert sf::Color to ImGui color
    ///
    /// \param color The SFML color to convert
    ///
    /// \return The ImGui color
    ///
    ///////////////////////////////////////////////////////////////////////////
    ImVec4 ConvertColor(const sf::Color& color) const;
};

} // !namespace Zappy
