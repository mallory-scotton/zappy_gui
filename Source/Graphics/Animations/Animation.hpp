///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <SFML/Graphics.hpp>

///////////////////////////////////////////////////////////////////////////////
// Namespace Zappy
///////////////////////////////////////////////////////////////////////////////
namespace Zappy
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Animation
{
protected:
    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    unsigned int m_x;           //< The X position of the animation
    unsigned int m_y;           //< The Y position of the animation
    float m_maxDist;            //< The maximum distance the animation can travel
    float m_duration;           //< The duration of the animation in seconds
    float m_currentTime;        //< The current time of the animation
    bool m_isFinished;          //< Flag to indicate if the animation is finished
    sf::CircleShape m_circle;   //< The circle shape used for the animation
    sf::RectangleShape m_rectangle; //< The rectangle shape used for the animation
    bool m_isCircle;        //< Flag to indicate if the animation is a circle
    bool m_isRectangle;   //< Flag to indicate if the animation is a rectangle

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param x The X position of the animation
    /// \param y The Y position of the animation
    /// \param maxDist The maximum distance the animation can travel
    /// \param Duration The duration of the animation in seconds
    ///
    ///////////////////////////////////////////////////////////////////////////
    Animation(unsigned int x, unsigned int y, float maxDist, float Duration);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Animation(void) = default;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetCircle(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetRectangle(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param deltaTime
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Update(float deltaTime);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param target
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Render(sf::RenderTarget& target);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param color
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetColor(const sf::Color& color);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param x
    /// \param y
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetPosition(unsigned int x, unsigned int y);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool IsFinished(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    unsigned int GetX(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    unsigned int GetY(void) const;
};

} // !namespace Zappy
