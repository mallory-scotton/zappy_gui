///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Game/GameState.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace Zappy
///////////////////////////////////////////////////////////////////////////////
namespace Zappy
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Application
{
private:
    ///////////////////////////////////////////////////////////////////////////
    // Private members
    ///////////////////////////////////////////////////////////////////////////
    GameState m_gameState;  //<! Game state containing the current game data
    bool m_isOpen;          //<! Application open status

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param host
    /// \param port
    ///
    ///////////////////////////////////////////////////////////////////////////
    Application(const std::string& host, int port);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Initialize the application
    ///
    /// \return True if the application was initialized successfully,
    /// false otherwise
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool IsOpen(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Update the application state
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Update(void);
};

} // !namespace Zappy
